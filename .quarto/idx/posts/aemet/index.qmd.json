{"title":"Handle climatic data using AEMET API","markdown":{"yaml":{"title":"Handle climatic data using AEMET API","author":"Adrian Manzanal","date":"2023-11-23","categories":["news","AEMET"],"image":"climaemet.jpg"},"headingText":"**Start to download historical data and 4 days forecast.**","containsRefs":false,"markdown":"\n\n**Quick weather information**\n\nThe goal of climaemet is to serve as an interface to download the climatic data of the Spanish Meteorological Agency (AEMET) directly from R using their API and create scientific graphs (climate charts, trend analysis of climate time series, temperature and precipitation anomalies maps, “warming stripes” graphics, climatograms, etc.).\n\nBrowse manual and vignettes at https://ropenspain.github.io/climaemet/.\n\n### 1. climaemet library and registration\n\nYou can install the released version of climaemet from CRAN with:\n\n```{r}\n#| eval: false\n#| output: false\n#| error: false\ninstall.packages(\"climaemet\", dependencies = TRUE)\n```\n\n```{r}\n#| eval: true\n#| output: false\n#| error: false\nlibrary(climaemet)\n```\n\nAfter install the package you have to register in the following URL in order to get the API key. Once\nyou receive your ID key you have sig in using the following function:\n\n```{r}\n#| eval: false\n#| output: false\n#| error: false\nbrowseURL(\"https://opendata.aemet.es/centrodedescargas/obtencionAPIKey\")\n```\n\n```{r}\n#| echo: false\n#| eval: true\n#| output: false\n#| error: false\naemet_api_key(\"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJtYW56YW5hbC5hZHJpYW5AZ21haWwuY29tIiwianRpIjoiYTgzMGZiMDYtNDA4MS00ZjI5LTg2OGQtODAxNjk4ZTQ5ODgzIiwiaXNzIjoiQUVNRVQiLCJpYXQiOjE3MDAwNjAxNDgsInVzZXJJZCI6ImE4MzBmYjA2LTQwODEtNGYyOS04NjhkLTgwMTY5OGU0OTg4MyIsInJvbGUiOiIifQ.K-WatjfGMNJ-fO4V6hj4u4P89PUdBuTbieab_gcKH44\", install = TRUE, overwrite = TRUE)\n```\n\nOnce you receive your ID key you have to sig in using the following function:\n\n```{r}\n#| eval: false\n#| output: false\n#| error: false\naemet_api_key(\"YOUR ID KEY\", install = TRUE, overwrite = TRUE)\n```\n\nIt would be useful to prepare these library for next steps..\n\n```{r}\n#| eval: true\n#| output: false\n#| error: false\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(broom)\nlibrary(mapSpain)\nlibrary(ggmap)\nlibrary(sf)\nlibrary(ggplot2)\n```\n\n### 2. Historical data by weather station\n\nAemet database contains historical weather data from 291 stations:\n```{r}\n#| eval: true\n#| output: true\n#| error: false\n#| echo: false\n\n#Seleccionamos una fecha del histórico\nfecha_select <- \"2023-11-01\"\n\n#conseguimos los datos diarios de cada estación para esa fecha\nclim_data <- aemet_daily_clim(\n  start = fecha_select, end = fecha_select,\n  return_sf = TRUE\n)\n\n#quitamos las Canarias para simplificar\nclim_data_clean <- clim_data  |> \n  filter(!provincia %in% c(\"LAS PALMAS\", \"STA. CRUZ DE TENERIFE\"))  |> \n  dplyr::select(fecha, tmin)  |> \n  filter(!is.na(tmin))\n\n#conseguimos el mapa de la Península\nesp_sf <- esp_get_ccaa(epsg = 4326) |> \n  filter(ine.ccaa.name != \"Canarias\") \n\nggplot() + geom_sf(data=esp_sf) +\n  geom_sf(data = clim_data_clean, color = \"#EE9322\") \n```\n\nIn order to see stations we are going to download the relation table which contains all of them and the ID:\n\n```{r}\n#| eval: true\n#| output: true\n#| error: false\nstations <- aemet_stations() \nhead(stations)\n```\n\nSelect the station that you want to analyze\n\n```{r}\n#| eval: true\n#| output: false\n#| error: false\nstation <- \"2661\" # Leon\n```\n\nNow we are going to download daily climatic data for this station between 2012 and 2023 using the following function: \"aemet_daily_clim\". This dataset contains multiple clima variables. We are interested on temperatures (average, minimal and max.). After filtrating teperatures we should convert to longer format help us to create time series charts.\n\n```{r}\n#| eval: true\n#| output: false\n#| error: false\nleon_2023 <-\n  aemet_daily_clim(station, start = \"2012-01-01\", end = \"2023-11-30\") %>% \n  select(fecha, tmed, tmax, tmin) |> \n  pivot_longer(cols=c(\"tmed\", \"tmax\", \"tmin\"),\n               names_to= \"variable\",\n               values_to=\"temp\")\n```\n\nUsing \"leon_2023\" object, we can create the chart which contains daily historic temperatures in Leon:\n\n```{r}\n#| eval: true\n#| output: true\n#| error: false\nggplot(leon_2023, aes(x = fecha, y = temp, group = variable, color = variable)) +\n  geom_line(linewidth = 0.2) +\n  scale_y_continuous(\n    labels = scales::label_comma(suffix = \"º\")) +\n  scale_color_manual(values = c(\"#EE9322\",\"grey\",\"#78D6C6\"), \n                     name = \"Temperature\") +\n  theme_minimal()+\n  labs(title = \"Leon\",\n       subtitle = \"Daily Temperatures, 2012-2023\",\n       x = \"\", y =\"\") +\n  theme(\n    legend.position = \"top\",\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.title = element_text(size = 28, face = \"bold\", family = \"serif\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 19),\n    axis.text = element_text(size = 16),\n    legend.text = element_text(size = 18)\n  )\n\n```\n\n### 3.Clima Forecast\n\nIf you are interested to know Aemet forecast, using \"aemet_forecast_daily\" you will be able to download clima variables by county.\n\nusing aemet_munic we are going to create an array which contains countys IDs.\n\n```{r}\n#| eval: true\n#| output: false\n#| error: false\nvarios_munis <- aemet_munic  %>% \n  filter(municipio_nombre %in% c(\"Loeches\", \"León\", \"Potes\", \"Gandia\"))  %>%    \n  pull(municipio)\n\ndaily <- aemet_forecast_daily(varios_munis)\n```\n\nTo review available variables\n\n\n```{r}\n#| eval: true\n#| output: true\n#| error: false\naemet_forecast_vars_available(daily)\n```\n\nNow lets select those variable that we are interested on. \n\n```{r}\n#| eval: true\n#| output: false\n#| error: false\n\ntemp_diaria <- aemet_forecast_tidy(daily, \"temperatura\")\n\n\ntemp_diaria_limpio <- temp_diaria  |> \n  select(\n    elaborado, fecha, municipio, nombre, temperatura_minima,\n    temperatura_maxima\n  )  |> \n  tidyr::pivot_longer(cols = contains(\"temperatura\"))\n```\n\nTime to chartering\n\n```{r}\n#| eval: true\n#| output: true\n#| error: false\nggplot(temp_diaria_limpio) +\n  geom_line(aes(fecha, value, color = name), linewidth = 1) +\n  geom_point(aes(fecha, value, color = name), size = 1.9) +\n  facet_wrap(~nombre, ncol = 2) +   # que haga un gráfico para cada municipio\n  scale_color_manual(\n    values = c(\"#EE9322\", \"#78D6C6\"),\n    labels = c(\"max\", \"min\")\n  ) +\n  scale_x_date(\n    labels = scales::label_date_short(),\n    breaks = \"day\"\n  ) +\n  scale_y_continuous(\n    labels = scales::label_comma(suffix = \"º\"),\n    limits = c(0,30)\n  ) +\n  theme_minimal() +\n  labs(\n    x = \"\", y = \"\",\n    color = \"\",\n    title = \"Some Countys\",\n    subtitle = \"Temperatures forecast for next 7 days\",\n    caption = paste(\n      \"Created \",\n      format(temp_diaria_limpio$elaborado[1], usetz = TRUE)\n    )\n  )  +\n  theme(\n    legend.position = \"top\",\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.title = element_text(size = 28, face = \"bold\", family = \"serif\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 19),\n    axis.text = element_text(size = 16),\n    legend.text = element_text(size = 18),\n    strip.text = element_text(size = 18)\n  )\n```\n\nFull site with more examples and vignettes on https://ropenspain.github.io/climaemet/\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"highlight-style":"a11y","output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","theme":"flatly","title-block-banner":true,"title":"Handle climatic data using AEMET API","author":"Adrian Manzanal","date":"2023-11-23","categories":["news","AEMET"],"image":"climaemet.jpg"},"extensions":{"book":{"multiFile":true}}}}}